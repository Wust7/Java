<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--2.扫描控制层组件-->
    <context:component-scan base-package="com.wust.mvc"></context:component-scan>

    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
<!--        设置视图解析器优先级，可以看出视图解析器可以配置多个-->
        <property name="order" value="1"/>
<!--        解析视图编码-->
        <property name="characterEncoding" value="UTF-8"/>
<!--        模板，下面的bean为改模板赋值-->
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀  ,可以解析路径/WEB-INF/templates/下的文件 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 ，可以解析后缀为.html的文件-->
                        <property name="suffix" value=".html"/>
<!--                        当前模板模型 ，可以处理文件HTML5的文件-->
                        <property name="templateMode" value="HTML5"/>
<!--                        当前模板编码方式-->
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
<!--    视图控制器      配置视图控制器之后，在控制器中写的方法都将失效，必须开启注解驱动才行-->
<!--    path：请求地址  view-name：视图名称-->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>
    <mvc:view-controller path="/file" view-name="file"></mvc:view-controller>
    <!--    开放对静态资源的访问，如static/vue.js-->
    <mvc:default-servlet-handler/>
<!--    开启MVC的注解驱动-->
    <mvc:annotation-driven/>

<!--    配置文件上传解析器  将上传的文件封装为MultipartFile,必须配置id，因为是根据id获取的-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>

<!--    配置拦截器-->
    <mvc:interceptors>
<!--        bean和ref默认对所有方法拦截-->
<!--        <bean class="com.wust.mvc.interceptors.FirstInterceptor"></bean>-->
<!--        <ref bean="firstInterceptor"></ref>-->
<!--        <mvc:interceptor>-->
<!--&lt;!&ndash;            /** ：匹配所有请求&ndash;&gt;-->
<!--            <mvc:mapping path="/*"/>-->
<!--&lt;!&ndash;            exclude-mapping ：排除哪些路径&ndash;&gt;-->
<!--            <mvc:exclude-mapping path="/"/>-->
<!--            <ref bean="firstInterceptor"></ref>-->
<!--        </mvc:interceptor>-->
<!--        配置多个拦截器，访问顺序只跟此处的先后顺序有关-->
        <ref bean="firstInterceptor"></ref>
        <ref bean="secondInterceptor"></ref>
    </mvc:interceptors>

<!--    配置异常处理-->
<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
<!--        <property name="exceptionMappings">-->
<!--            <props>-->
<!--&lt;!&ndash;                捕获异常，当遇到异常时跳转到error.html页面-->
<!--                    properties的键表示处理器方法执行过程中出现的异常-->
<!--                    properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到该页面-->
<!--&ndash;&gt;-->
<!--                <prop key="java.lang.ArithmeticException">error</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--&lt;!&ndash;        设置将异常信息共享在请求域中，以ex为键，当前得异常为值&ndash;&gt;-->
<!--        <property name="exceptionAttribute" value="ex"></property>-->
<!--    </bean>-->
</beans>